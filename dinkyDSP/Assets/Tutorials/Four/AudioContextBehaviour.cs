using UnityEngine;
using System.Collections.Generic;
using com.lonewolfwilliams.dinkyDSP;
using System;

/*
 * Tutorial four
 * 
 * This tutorial shows how you an alternative way to wire up audioNodes
 * 
 * 
 * 
 */

namespace TutorialFour
{
	public class AudioContextBehaviour : MonoBehaviour 
	{
		Driver m_driver;
		SineWaveGenerator m_sineWave;
		MonoMixer m_mixer;
		Gain m_gainerTwo;
		
		/// <summary>
		/// When Awake is called by the Unity Engine we build our simple audio graph,
		/// and attach the root node of our graph to the driver.
		/// </summary>
		void Awake()
		{
			//context
			Driver.sampleRate = 48000;
			m_driver = new Driver();
			
			//audio nodes
			m_sineWave = new SineWaveGenerator();
			var gainerOne = new Gain();
			gainerOne.drive = 0.5;
			m_gainerTwo = new Gain();
			m_gainerTwo.drive = 0;
			var clipper = new HardClipping();
			clipper.threshold = 0.2;
			var splitter = new CustomAudioNode();
			m_mixer = new MonoMixer();
			m_mixer.masterOutputLevel = 0.5;
			
			//connect our graph
			splitter.InputNode = m_sineWave;
			splitter.AddOutput(gainerOne);
			splitter.AddOutput(clipper);
			m_gainerTwo.InputNode = clipper;
			m_mixer.AddInput(gainerOne);
			m_mixer.AddInput(m_gainerTwo);
			m_driver.rootNode = m_mixer;
		}
		
		void OnGUI()
		{
			m_gainerTwo.drive = GUI.HorizontalSlider(
				new Rect(10, 50, 100, 50), 
				(float)m_gainerTwo.drive, 0, 2.5f);
			
			GUI.Label(new Rect(10, 10, 150, 50), "ghost haunting simulator v 0.3 Overdrive!");
		}
		
		/// <summary>
		/// This is called by Unity Engine after it has read the audio data from all of the 
		/// Audio sources in the scene and processed them using the built-in dsp components 
		/// (which are available in pro only). This callback is where you pass data from the 
		/// driver object at the root of your DSP graph to the Unity Engine.
		/// </summary>
		/// <param name='data'>
		/// Sample data from the audio sources in the scene.
		/// </param>
		/// <param name='channels'>
		/// The number of channels that Unity Engine is working with, typically two.
		/// </param>
		void OnAudioFilterRead(float[] data, int channels)
		{
			//pass the sample data from the driver into the Unity Engine sample buffer
			com.lonewolfwilliams.dinkyDSP.Driver.channels = channels;
			m_driver.GenerateSamples(ref data);
		}
		
		//helper classes---------------------------------------------------------------
		
		/// <summary>
		/// A custom audio node demonstrating an alternative way to wire up audioNodes
		/// </summary>
		public class CustomAudioNode: IAudioNode
		{
			#region IHasInput
			IAudioNode m_inputNode;
			public IAudioNode InputNode
			{
				get
				{
					return m_inputNode;
				}
				set
				{
					m_inputNode = value;
					
					/*
						this is the useful bit, when a new sample is generated by the inpu,
						we store it in a field so that every subsequent call to get sample 
						will return the same value (imagine trying to do this without consuming
						the event)
					*/
					m_inputNode.SampleGenerated += (sample) => m_sample = sample;
				}
			}
			#endregion
			
			double m_sample;
			public void AddOutput(IHasInput child)
			{
				child.InputNode = this;
			}
			
			#region IAudioNode implementation
			public event SampleEventHandler SampleGenerated;
			public double GetSample ()
			{
				if(SampleGenerated != null)
				{
					SampleGenerated(m_sample);	
				}
				
				return m_sample;
			}
			#endregion
		}
	}
}
